# sw academy 문제풀이 2 - 1234. 비밀번호
'''
평소에 잔머리가 발달하고 게으른 철수는 비밀번호를 기억하는 것이 너무 귀찮았습니다.
적어서 가지고 다니고 싶지만 누가 볼까봐 걱정입니다. 한가지 생각을 해냅니다.
0~9로 이루어진 번호 문자열에서 같은 번호로 붙어있는 쌍들을 소거하고 남은 번호를 비밀번호로 만드는 것입니다.
번호 쌍이 소거되고 소거된 번호 쌍의 좌우 번호가 같은 번호이면 또 소거 할 수 있습니다.
예를 들어 아래의 번호 열을 철수의 방법으로 소거하고 알아낸 비밀 번호입니다.


[입력]
10개의 테스트 케이스가 10줄에 걸쳐, 한 줄에 테스트 케이스 하나씩 제공된다.
각 테스트 케이스는 우선 문자열이 포함하는 문자의 총 수가 주어지고, 공백을 둔 다음 번호 문자열이 공백 없이 제공된다.
문자열은 0~9로 구성되며 문자열의 길이 N은 10≤N≤100이다. 비밀번호의 길이는 문자열의 길이보다 작다.

[출력]
#부호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 테스트 케이스에 대한 답(비밀번호)을 출력한다.
'''
import sys
sys.stdin = open("sw1234input.txt")

# 테스트 케이스 : 10개
for test_case in range(1, 11):
    # 각 테스트 케이스에 대한 정보
    # 문자열의 길이와 문자열
    # 숫자긴 하지만, 해당 숫자열의 각 숫자에 접근해야 함 -> str형으로 받기
    N, numbers = input().split()

    # 같은 숫자가 붙어있을 경우 top이 가리키는 값과 그 다음 값을 pop
    # 각 숫자들의 str형을 원소로 갖는 리스트 생성
    stack = []
    # top 초기화
    top = -1

    # 모든 str 숫자에 대해 push / pop 진행
    for num in numbers:
        # top이 초기화 된 경우 or top의 값이 현재 보고 있는 num과 다른 경우 : push
        if top == -1 or stack[top] != num:
            stack.append(num)
            # top의 값 갱신
            top += 1
        # top의 값이 현재 보고 있는 값과 다른 경우 : 현재 top의 값을 pop
        else:
            stack.pop(top)
            # top의 값 갱신(pop으로 인해 stack의 길이 -1)
            top -= 1
    result = ''

    for num in stack:
        result += num
    print(f'#{test_case} {result}')